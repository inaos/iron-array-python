(base) ia@ia-bench-01:~/inaos/iron-array-python/PyData-NYC-2019$ PYTHONPATH=.. python3 ia-getslices4.py
/home/ia/.local/lib/python3.6/site-packages/numba/errors.py:137: UserWarning: Insufficiently recent colorama version found. Numba requires colorama >= 0.3.9
  warnings.warn(msg)
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
    29    107.6 MiB    107.6 MiB   @profile
    30                             def open_datafile(filename):
    31    111.8 MiB      4.2 MiB       dataset = ia.from_file(filename, load_in_mem=False)
    32    111.8 MiB      0.0 MiB       return dataset


Time to open file: 0.036
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
    48    111.8 MiB    111.8 MiB   @profile
    49                             def concatenate_slices(dataset):
    50    111.8 MiB      0.0 MiB       dtshape = ia.dtshape(shape=shape, pshape=pshape, dtype=np.float32)
    51    116.2 MiB      4.4 MiB       iarr = ia.empty(dtshape, clevel=CLEVEL, clib=CLIB, nthreads=NTHREADS, blocksize=BLOCKSIZE)
    52    407.8 MiB      2.0 MiB       for i, (_, precip_block) in enumerate(iarr.iter_write_block()):
    53    408.4 MiB      5.6 MiB           slice_np = ia.iarray2numpy(get_slice(dataset, i))
    54    408.4 MiB      2.5 MiB           precip_block[:, :, :] = slice_np
    55    405.8 MiB      0.0 MiB       return iarr


Time for concatenating 50 slices into an ia container (1): 2.146
cratio 4.822437946210753
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
    48    405.8 MiB    405.8 MiB   @profile
    49                             def concatenate_slices(dataset):
    50    405.8 MiB      0.0 MiB       dtshape = ia.dtshape(shape=shape, pshape=pshape, dtype=np.float32)
    51    405.8 MiB      0.0 MiB       iarr = ia.empty(dtshape, clevel=CLEVEL, clib=CLIB, nthreads=NTHREADS, blocksize=BLOCKSIZE)
    52    635.1 MiB      0.2 MiB       for i, (_, precip_block) in enumerate(iarr.iter_write_block()):
    53    635.1 MiB      5.2 MiB           slice_np = ia.iarray2numpy(get_slice(dataset, i))
    54    635.1 MiB      0.0 MiB           precip_block[:, :, :] = slice_np
    55    635.1 MiB      0.0 MiB       return iarr


Time for concatenating 50 slices into an ia container (2): 2.054
cratio 6.023612129902033
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
    48    635.1 MiB    635.1 MiB   @profile
    49                             def concatenate_slices(dataset):
    50    635.1 MiB      0.0 MiB       dtshape = ia.dtshape(shape=shape, pshape=pshape, dtype=np.float32)
    51    635.1 MiB      0.0 MiB       iarr = ia.empty(dtshape, clevel=CLEVEL, clib=CLIB, nthreads=NTHREADS, blocksize=BLOCKSIZE)
    52    796.1 MiB      0.0 MiB       for i, (_, precip_block) in enumerate(iarr.iter_write_block()):
    53    796.1 MiB      3.0 MiB           slice_np = ia.iarray2numpy(get_slice(dataset, i))
    54    796.1 MiB      0.0 MiB           precip_block[:, :, :] = slice_np
    55    796.1 MiB      0.0 MiB       return iarr


Time for concatenating 50 slices into an ia container (3): 1.776
cratio 8.565665018339143
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
    80    796.1 MiB    796.1 MiB   @profile
    81                             def compute_slices(dataset):
    82    796.1 MiB      0.0 MiB       expr = ia.Expr(eval_flags="iterblock", clevel=CLEVEL, clib=CLIB, nthreads=NTHREADS, blocksize=BLOCKSIZE)
    83    796.1 MiB      0.0 MiB       expr.bind("x", dataset)
    84    804.8 MiB      8.7 MiB       expr.compile(sexpr)
    85   1226.1 MiB    421.3 MiB       out = expr.eval(shape, pshape, dataset.dtype)
    86   1226.1 MiB      0.0 MiB       return out


Time for computing '(sin(x) - 3.2) * (cos(x) + 1.2)' expression with 1 operand (iarray): 1.655
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
    92   1226.2 MiB   1226.2 MiB   @profile
    93                             def sum_slices(slice):
    94   1229.2 MiB      3.0 MiB       slsum = ia.iarray2numpy(slice).sum()
    95   1229.2 MiB      0.0 MiB       return slsum


Time for summing up 1 operand (iarray): 0.919
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
   102   1229.2 MiB   1229.2 MiB   @profile
   103                             def compute_slices2(dset1, dset2, dset3):
   104   1229.2 MiB      0.0 MiB       expr = ia.Expr(eval_flags="iterblock", clevel=CLEVEL, clib=CLIB, nthreads=NTHREADS, blocksize=BLOCKSIZE)
   105   1229.2 MiB      0.0 MiB       expr.bind("x", dset1)
   106   1229.2 MiB      0.0 MiB       expr.bind("y", dset2)
   107   1229.2 MiB      0.0 MiB       expr.bind("z", dset3)
   108   1229.2 MiB      0.0 MiB       expr.compile(sexpr2)
   109   1964.9 MiB    735.7 MiB       out = expr.eval(shape, pshape, dset1.dtype)
   110   1964.9 MiB      0.0 MiB       return out


Time for computing '(x - y) * (z - 3.) * (y - x - 2)' expression with 3 operands (iarray): 2.854
Time for converting the slices into numpy: 2.211
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
   125   5964.2 MiB   5964.2 MiB   @profile
   126                             def compute_numpy(x):
   127   7297.5 MiB   1333.3 MiB       out = (np.sin(x) - 3.2) * (np.cos(x) + 1.2)
   128   7297.5 MiB      0.0 MiB       return out


Time for computing '(sin(x) - 3.2) * (cos(x) + 1.2)' expression with 1 operand (via numpy): 5.940
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
   134   7297.5 MiB   7297.5 MiB   @profile
   135                             def sum_npslices(npslices):
   136   7297.5 MiB      0.0 MiB       return npslices.sum()


Time for summing up the computed slices (pure numpy): 0.183
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
   144   7297.5 MiB   7297.5 MiB   @profile
   145                             def compute_numpy2(x, y, z):
   146   8630.7 MiB   1333.2 MiB       out = (x - y) * (z - 3.) * (y - x - 2)
   147   8630.7 MiB      0.0 MiB       return out


Time for computing '(x - y) * (z - 3.) * (y - x - 2)' expression with 3 operands (via numpy): 3.051
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
   153   8630.7 MiB   8630.7 MiB   @profile
   154                             def compute_numexpr(sexpr, x):
   155   8630.7 MiB      0.0 MiB       ne.set_num_threads(NTHREADS)
   156                                 # So as to avoid the result to be cast to a float64, we use an out param
   157   8630.7 MiB      0.0 MiB       out = np.empty(x.shape, x.dtype)
   158   9963.5 MiB   1332.8 MiB       ne.evaluate(sexpr, local_dict={'x': x}, out=out, casting='unsafe')
   159   9963.5 MiB      0.0 MiB       return out


Time for computing '(sin(x) - 3.2) * (cos(x) + 1.2)' expression with 1 operand (via numexpr): 1.293
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
   165   8630.8 MiB   8630.8 MiB   @profile
   166                             def compute_numexpr2(sexpr, x, y, z):
   167   8630.9 MiB      0.1 MiB       ne.set_num_threads(NTHREADS)
   168                                 # So as to avoid the result to be cast to a float64, we use an out param
   169   8630.9 MiB      0.0 MiB       out = np.empty(x.shape, x.dtype)
   170   9963.6 MiB   1332.7 MiB       ne.evaluate(sexpr, local_dict={'x': x, 'y': y, 'z': z}, out=out, casting='unsafe')
   171   9963.6 MiB      0.0 MiB       return out
from time import time


Time for computing '(x - y) * (z - 3.) * (y - x - 2)' expression with 3 operands (via numexpr): 1.278
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
   185   8630.8 MiB   8630.8 MiB   @profile
   186                             def compute_numba(x):
   187                                 # So as to avoid the result to be cast to a float64
   188   8630.8 MiB      0.0 MiB       out = np.empty(x.shape, x.dtype)
   189   9967.3 MiB   1336.4 MiB       poly_numba(x, out)
   190   9967.3 MiB      0.0 MiB       return out


Time for computing '(sin(x) - 3.2) * (cos(x) + 1.2)' expression with 1 operand (via numba): 3.212
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
   204   9967.3 MiB   9967.3 MiB   @profile
   205                             def compute_numba2(x, y, z):
   206                                 # So as to avoid the result to be cast to a float64
   207   9967.3 MiB      0.0 MiB       out = np.empty(x.shape, x.dtype)
   208  11300.3 MiB   1333.0 MiB       poly_numba2(x, y, z, out)
   209  11300.3 MiB      0.0 MiB       return out


Time for computing '(x - y) * (z - 3.) * (y - x - 2)' expression with 3 operand (via numba): 0.949
