(base) ia@ia-bench-01:~/inaos/iron-array-python/PyData-NYC-2019$ PYTHONPATH=.. python3 ia-getslices4.py
/home/ia/.local/lib/python3.6/site-packages/numba/errors.py:137: UserWarning: Insufficiently recent colorama version found. Numba requires colorama >= 0.3.9
  warnings.warn(msg)
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
    29    107.8 MiB    107.8 MiB   @profile
    30                             def open_datafile(filename):
    31    112.0 MiB      4.2 MiB       dataset = ia.from_file(filename, load_in_mem=False)
    32    112.0 MiB      0.0 MiB       return dataset


Time to open file: 0.036
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
    48    112.0 MiB    112.0 MiB   @profile
    49                             def concatenate_slices(dataset):
    50    112.0 MiB      0.0 MiB       dtshape = ia.dtshape(shape=shape, pshape=pshape, dtype=np.float32)
    51    116.4 MiB      4.4 MiB       iarr = ia.empty(dtshape, clevel=CLEVEL, clib=CLIB, nthreads=NTHREADS, blocksize=BLOCKSIZE)
    52    408.0 MiB      0.0 MiB       for i, (_, precip_block) in enumerate(iarr.iter_write_block()):
    53    408.5 MiB      7.3 MiB           slice_np = ia.iarray2numpy(get_slice(dataset, i))
    54    408.5 MiB      2.5 MiB           precip_block[:, :, :] = slice_np
    55    406.0 MiB      0.0 MiB       return iarr


Time for concatenating 50 slices into an ia container (1): 2.235
cratio 4.822437946210753
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
    48    406.0 MiB    406.0 MiB   @profile
    49                             def concatenate_slices(dataset):
    50    406.0 MiB      0.0 MiB       dtshape = ia.dtshape(shape=shape, pshape=pshape, dtype=np.float32)
    51    406.0 MiB      0.0 MiB       iarr = ia.empty(dtshape, clevel=CLEVEL, clib=CLIB, nthreads=NTHREADS, blocksize=BLOCKSIZE)
    52    635.4 MiB      0.2 MiB       for i, (_, precip_block) in enumerate(iarr.iter_write_block()):
    53    635.4 MiB      5.2 MiB           slice_np = ia.iarray2numpy(get_slice(dataset, i))
    54    635.4 MiB      0.0 MiB           precip_block[:, :, :] = slice_np
    55    635.4 MiB      0.0 MiB       return iarr


Time for concatenating 50 slices into an ia container (2): 2.078
cratio 6.023612129902033
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
    48    635.4 MiB    635.4 MiB   @profile
    49                             def concatenate_slices(dataset):
    50    635.4 MiB      0.0 MiB       dtshape = ia.dtshape(shape=shape, pshape=pshape, dtype=np.float32)
    51    635.4 MiB      0.0 MiB       iarr = ia.empty(dtshape, clevel=CLEVEL, clib=CLIB, nthreads=NTHREADS, blocksize=BLOCKSIZE)
    52    796.4 MiB      0.0 MiB       for i, (_, precip_block) in enumerate(iarr.iter_write_block()):
    53    796.4 MiB      3.0 MiB           slice_np = ia.iarray2numpy(get_slice(dataset, i))
    54    796.4 MiB      0.0 MiB           precip_block[:, :, :] = slice_np
    55    796.4 MiB      0.0 MiB       return iarr


Time for concatenating 50 slices into an ia container (3): 1.910
cratio 8.565665018339143
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
    80    796.4 MiB    796.4 MiB   @profile
    81                             def compute_slices(dataset):
    82    796.4 MiB      0.0 MiB       expr = ia.Expr(eval_method="iterblosc", clevel=CLEVEL, clib=CLIB, nthreads=NTHREADS, blocksize=BLOCKSIZE)
    83    796.4 MiB      0.0 MiB       expr.bind("x", dataset)
    84    804.8 MiB      8.4 MiB       expr.compile(sexpr)
    85   1389.9 MiB    585.1 MiB       out = expr.eval(shape, pshape, dataset.dtype)
    86   1389.9 MiB      0.0 MiB       return out


Time for computing '(sin(x) - 3.2) * (cos(x) + 1.2)' expression with 1 operand (iarray): 2.290
/home/ia/.local/lib/python3.6/site-packages/numpy/core/_methods.py:38: RuntimeWarning: overflow encountered in reduce
  return umr_sum(a, axis, dtype, out, keepdims, initial, where)
/home/ia/.local/lib/python3.6/site-packages/numpy/core/_methods.py:38: RuntimeWarning: invalid value encountered in reduce
  return umr_sum(a, axis, dtype, out, keepdims, initial, where)
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
    92   1390.1 MiB   1390.1 MiB   @profile
    93                             def sum_slices(slice):
    94   1390.1 MiB      0.0 MiB       slsum = ia.iarray2numpy(slice).sum()
    95   1390.1 MiB      0.0 MiB       return slsum


Time for summing up 1 operand (iarray): 0.975
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
   102   1390.1 MiB   1390.1 MiB   @profile
   103                             def compute_slices2(dset1, dset2, dset3):
   104   1390.1 MiB      0.0 MiB       expr = ia.Expr(eval_method="iterblosc", clevel=CLEVEL, clib=CLIB, nthreads=NTHREADS, blocksize=BLOCKSIZE)
   105   1390.1 MiB      0.0 MiB       expr.bind("x", dset1)
   106   1390.1 MiB      0.0 MiB       expr.bind("y", dset2)
   107   1390.1 MiB      0.0 MiB       expr.bind("z", dset3)
   108   1394.0 MiB      3.9 MiB       expr.compile(sexpr2)
   109   2335.5 MiB    941.5 MiB       out = expr.eval(shape, pshape, dset1.dtype)
   110   2335.5 MiB      0.0 MiB       return out


Time for computing '(x - y) * (z - 3.) * (y - x - 2)' expression with 3 operands (iarray): 3.104
Time for converting the slices into numpy: 2.199
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
   125   6336.2 MiB   6336.2 MiB   @profile
   126                             def compute_numpy(x):
   127   7670.1 MiB   1334.0 MiB       out = (np.sin(x) - 3.2) * (np.cos(x) + 1.2)
from time import time
   128   7670.1 MiB      0.0 MiB       return out


Time for computing '(sin(x) - 3.2) * (cos(x) + 1.2)' expression with 1 operand (via numpy): 5.851
Filename: ia-getslices4.py

Line #    Mem usage    Increment   Line Contents
================================================
   134   7670.1 MiB   7670.1 MiB   @profile
   135                             def sum_npslices(npslices):
   136   7670.1 MiB      0.0 MiB       return npslices.sum()


Time for summing up the computed slices (pure numpy): 0.183
Traceback (most recent call last):
  File "ia-getslices4.py", line 142, in <module>
    np.testing.assert_allclose(np.array(slsum, dtype=np.float32), np.array(npslsum, dtype=np.float32), rtol=1e-5)
  File "/home/ia/.local/lib/python3.6/site-packages/numpy/testing/_private/utils.py", line 1515, in assert_allclose
    verbose=verbose, header=header, equal_nan=equal_nan)
  File "/home/ia/.local/lib/python3.6/site-packages/numpy/testing/_private/utils.py", line 769, in assert_array_compare
    flagged = func_assert_same_pos(x, y, func=isnan, hasval='nan')
  File "/home/ia/.local/lib/python3.6/site-packages/numpy/testing/_private/utils.py", line 745, in func_assert_same_pos
    raise AssertionError(msg)
AssertionError:
Not equal to tolerance rtol=1e-05, atol=0

x and y nan location mismatch:
 x: array(nan, dtype=float32)
 y: array(-2.427255e+09, dtype=float32)
